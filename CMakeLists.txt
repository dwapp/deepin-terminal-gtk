cmake_minimum_required(VERSION 3.25)

project(deepin-terminal-gtk
    VERSION 5.1.0
    DESCRIPTION "DDE terminal emulator application"
    HOMEPAGE_URL "https://github.com/wineee/deepin-terminal-gtk"
    LANGUAGES C
)

set(target deepin-terminal-gtk)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# C standard can be overridden when this is used as a sub-project.
if(NOT CMAKE_C_STANDARD)
  # This project can use C11, but will gracefully decay down to C99.
  set(CMAKE_C_STANDARD 11)
  set(CMAKE_C_STANDARD_REQUIRED OFF)
  set(CMAKE_C_EXTENSIONS OFF)
endif(NOT CMAKE_C_STANDARD)

# Enabled PIE binaries by default if supported.
include(CheckPIESupported OPTIONAL RESULT_VARIABLE CHECK_PIE_SUPPORTED)
if (CHECK_PIE_SUPPORTED)
  check_pie_supported(LANGUAGES C)
  if (CMAKE_CXX_LINK_PIE_SUPPORTED)
    set (CMAKE_POSITION_INDEPENDENT_CODE TRUE)
  endif ()
endif()

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
include(ExternalProject)
include(ValaPrecompile)
include(ValaVersion)
include(GNUInstallDirs)
find_package(Vala)
ensure_vala_version("0.22.0" MINIMUM)
find_package(PkgConfig)
find_package(GLib "2.48" REQUIRED)
find_package(JsonGlib REQUIRED)
find_package(Libsecret REQUIRED)
find_package(FontConfig)
find_package(X11)
find_package(Gettext)

pkg_check_modules(GTK3 REQUIRED gtk+-3.0)
pkg_check_modules(GEE REQUIRED gee-0.8)
pkg_check_modules(GIO REQUIRED gio-unix-2.0)
pkg_check_modules(RSVG REQUIRED librsvg-2.0)
pkg_check_modules(WNCK REQUIRED libwnck-3.0)
pkg_check_modules(FONTCONFIG REQUIRED fontconfig)
pkg_check_modules(GLIB REQUIRED glib-2.0)
pkg_check_modules(VTE REQUIRED vte-2.91)

option(BUILD_TESTING "Build with native testing" OFF)

# There're 3 releases for 0.59.x, only 0.59.0 keeps old behaviour
if("${VTE_VERSION}" VERSION_GREATER "0.59.0")
    list(APPEND ARGS_DEFINITIONS "VTE_0_60")
endif()

configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/constant.vala.in
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/constant.vala
)

if(BUILD_TESTING)
    message("set project_path to native test")
    execute_process(
        COMMAND sed s|@@PROJECT_PATH@@|\"${CMAKE_SOURCE_DIR}\"|g
        OUTPUT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/project_path.c
        INPUT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/project_path.c.in
    )
    list(APPEND ARGS_DEFINITIONS "TEST_BUILD")
else()
    message("set project_path to ${CMAKE_INSTALL_PREFIX}")
    execute_process(
        COMMAND sed s|@@PROJECT_PATH@@|\"${CMAKE_INSTALL_PREFIX}\"|g
        OUTPUT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/project_path.c
        INPUT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/project_path.c.in
    )
endif()

set(CFLAGS
	${GIO_CFLAGS}
	${GTK3_CFLAGS} ${GTK3_CFLAGS_OTHER}
	${GEE_CFLAGS}
	${X11_CFLAGS} ${X11_CFLAGS_OTHER}
	-DWNCK_I_KNOW_THIS_IS_UNSTABLE
	-DGETTEXT_PACKAGE=${target}
	-s -O3 -w
	#	-g
)
add_compile_options(${CFLAGS})
set(INCLUDE_PATHS
	${GIO_INCLUDE_DIRS}
	${GTK3_INCLUDE_DIRS}
	${GEE_INCLUDE_DIRS}
	${WNCK_INCLUDE_DIRS}
	${RSVG_INCLUDE_DIRS}
	${VTE_INCLUDE_DIRS}
	${JsonGlib_INCLUDE_DIRS}
	${LIBSECRET_INCLUDE_DIRS}
)


include_directories(${INCLUDE_PATHS})
set(LIBS
	${GIO_LIBRARIES}
	${GTK3_LIBRARIES}
	${GEE_LIBRARIES}
	${WNCK_LIBRARIES}
	${RSVG_LIBRARIES}
	${JsonGlib_LIBRARIES}
	${LIBSECRET_LIBRARIES}
	${ZLIB_LIBRARIES}
	${X11_LIBRARIES}
	${XTST_LIBRARIES}
	${FONTCONFIG_LIBRARY}
	${M_LIBRARIES}
	${VTE_LIBRARIES}
	stdc++
	m
	z
	pthread
	gnutls
	pcre2-8
)


SET(APP_SOURCES, "")
FILE(GLOB valalist LIST_FILES true */*.vala)
FOREACH(child ${valalist})
	file(RELATIVE_PATH
		file_path
		${CMAKE_SOURCE_DIR}
		${child}
	)
	set (APP_SOURCES ${APP_SOURCES} ${file_path})
ENDFOREACH()

set(VALA_PRECOMPILE_PACKAGES
	xcb
	gtk+-3.0
	vte-2.91
	gee-0.8
	json-glib-1.0
	gio-2.0
	libwnck-3.0
	posix
	libsecret-1
	gdk-x11-3.0
	glib-2.0
	librsvg-2.0
)


vala_precompile(VALA_C ./main.vala ${APP_SOURCES}
	        PACKAGES ${VALA_PRECOMPILE_PACKAGES})

add_executable(${target}
	${VALA_C}
	${CMAKE_SOURCE_DIR}/project_path.c
	${CMAKE_SOURCE_DIR}/lib/font.c)


target_link_libraries(${target} ${LIBS})

FILE(GLOB children LIST_DIRECTORIES true po/*)
SET(dirlist "")

FOREACH(child ${children})
	IF(IS_DIRECTORY ${child})
		get_filename_component(childdir ${child} NAME)
		LIST(APPEND dirlist ${childdir})
	ENDIF()
ENDFOREACH()

FOREACH(lang ${dirlist})
	SET(gmoFiles)
	FOREACH(current_PO_FILE po/${lang}/LC_MESSAGES/deepin-terminal-gtk.po)
    	  SET(gmoFile ${CMAKE_CURRENT_BINARY_DIR}/${lang}-${target}.gmo)
    	  SET(INSTALL_DESTINATION share/locale/)
    	  ADD_CUSTOM_COMMAND(OUTPUT ${gmoFile}
    	        COMMAND ${GETTEXT_MSGFMT_EXECUTABLE} -o ${gmoFile} ${current_PO_FILE}
    	        WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
    	        DEPENDS ${current_PO_FILE}
    	     )
    	  INSTALL(FILES ${gmoFile} DESTINATION ${INSTALL_DESTINATION}/${lang}/LC_MESSAGES/  RENAME ${target}.mo)

    	  LIST(APPEND gmoFiles ${gmoFile})
    ENDFOREACH(current_PO_FILE)

    ADD_CUSTOM_TARGET(${lang} ALL DEPENDS ${gmoFiles})

ENDFOREACH(lang)

INSTALL (TARGETS ${target} DESTINATION ${CMAKE_INSTALL_BINDIR})
INSTALL (PROGRAMS ssh_login.sh DESTINATION ${CMAKE_INSTALL_LIBEXECDIR})
INSTALL (DIRECTORY hicolor DESTINATION ${CMAKE_INSTALL_DATADIR}/icons)
INSTALL (DIRECTORY image DESTINATION ${CMAKE_INSTALL_DATADIR}/${target} FILES_MATCHING PATTERN "*.png")
INSTALL (DIRECTORY image DESTINATION ${CMAKE_INSTALL_DATADIR}/${target} FILES_MATCHING PATTERN "*.svg")
INSTALL (DIRECTORY theme DESTINATION ${CMAKE_INSTALL_DATADIR}/${target} FILES_MATCHING PATTERN "*")
INSTALL (FILES style.css DESTINATION ${CMAKE_INSTALL_DATADIR}/${target})
INSTALL (FILES ${target}.desktop DESTINATION ${CMAKE_INSTALL_DATADIR}/applications)
